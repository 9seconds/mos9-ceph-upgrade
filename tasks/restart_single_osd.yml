---

- name: find out osd.{{ item }} version
  command: >
    ceph daemon osd.{{ item }} version
  register:
    running_osd_version

- name: find out OSD data owner
  stat: >
    path=/var/lib/ceph/osd/{{ cluster_name }}-{{ item }}
  register: osd_dir_stat

- name: check if osd.{{ item }} should be restarted
  set_fact:
    dont_restart_osd: true
  when:
    - "{{ (running_osd_version.stdout|from_json).version == ceph_candidate_package_version.stdout }}"
    - "{{ ceph_user.stdout == '' or osd_dir_stat.stat.pw_name == ceph_user.stdout }}"

- name: stop OSD {{ item }}
  service: >
    name=ceph-osd
    state=stopped
    args=id={{ item }}
  when: "{{ not(dont_restart_osd|default(False)|bool) }}"

- name: fix OSD data ownership
  file: >
    path=/var/lib/ceph/osd/{{ cluster_name }}-{{ item }}
    state=directory
    owner={{ ceph_user.stdout }}
    group={{ ceph_group.stdout }}
    mode=0770
    recurse=yes
  when:
    - ceph_user.stdout != ''
    - osd_dir_stat.stat.pw_name != ceph_user.stdout
    - "{{ not(dont_restart_osd|default(False)|bool) }}"

- name: start OSD {{ item }}
  service: >
    name=ceph-osd
    state=started
    args=id={{ item }}
  when: "{{ not(dont_restart_osd|default(False)|bool) }}"

# Wait until all PGs are in the `active+clean' state.
# In Python this check is a clean and simple:
#
# all(pg['state'] == 'active+clean' for pg in json.loads(pg_dump_pre)['pg_stats'])
#
# However ansible expressions are not Python, they are jinja2 templates and
# a naive translation
#
# until: all(pg['state'] == 'active+clean' for pg in (pg_dump_pre|from_json)['pg_stats'])
#
# is not a valid template - `for' is a jinja2 keyword here, not a pythonic one.
# With jinja2 >= 2.8 one could write the condition as
#
# (pg_dump_pre.stdout|from_json)['pg_stats']|rejectattr('state', 'equalto', 'active+clean')|count == 0
#
# however jinja2 2.7 (which is shipped with Ubuntu 14.04) does not provide
# the 'equalto' filter. In order to solve the problem I abuse the `groupby'
# filters to rearrange the pg_stats as a list of dicts (sort of) with keys
# being `grouper' and `list'
#
# (pg_dump_pre.stdout|from_json)['pg_stats']|groupby('state')
#
# [
#  {'grouper': 'active+clean', 'list': [{'pgid': 'foo', ... }, ...]},
#  {'grouper': 'active+degraded', [{'pgid': 'bar', ...}, ...]},
# ]
#
# Let's extract all groupers (states) and join them. The result will be
# 'active+clean' if and only if all states are 'active+clean'. For instance,
# if there some PGs in 'active+degraded' state, and some in the 'active+clean'
# state, the result of join might be 'active+degradedactive+clean' or
# 'active+cleanactive+degraded', neither of thease is equal to 'active+clean'


- name: wait for PGs to become active+clean
  command: ceph -s --format=json
  register: ceph_health_post
  delegate_to: "{{ groups.mons[0] }}"
  until: (ceph_health_post.stdout|from_json).pgmap.pgs_by_state|length == 1 and
         (ceph_health_post.stdout|from_json).pgmap.pgs_by_state.0.state_name == "active+clean"
  retries: "{{ osd_restart_attempts }}"
  delay: "{{ osd_restart_delay }}"
  when: "{{ not(dont_restart_osd|default(False)|bool) }}"
